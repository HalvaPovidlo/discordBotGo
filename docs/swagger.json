{
    "swagger": "2.0",
    "info": {
        "description": "A music discord bot.",
        "title": "HalvaBot for Discord",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api",
    "paths": {
        "/discord/music/play": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Play song from youtube by name or url",
                "parameters": [
                    {
                        "description": "Название песни или url",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.songQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/voice.QueueEntry"
                        }
                    },
                    "400": {
                        "description": "Неверные параметры",
                        "schema": {
                            "$ref": "#/definitions/rest.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "discordgo.User": {
            "type": "object",
            "properties": {
                "accent_color": {
                    "description": "User's banner color, encoded as an integer representation of hexadecimal color code",
                    "type": "integer"
                },
                "avatar": {
                    "description": "The hash of the user's avatar. Use Session.UserAvatar\nto retrieve the avatar itself.",
                    "type": "string"
                },
                "banner": {
                    "description": "The hash of the user's banner image.",
                    "type": "string"
                },
                "bot": {
                    "description": "Whether the user is a bot.",
                    "type": "boolean"
                },
                "discriminator": {
                    "description": "The discriminator of the user (4 numbers after name).",
                    "type": "string"
                },
                "email": {
                    "description": "The email of the user. This is only present when\nthe application possesses the email scope for the user.",
                    "type": "string"
                },
                "flags": {
                    "description": "The flags on a user's account.\nOnly available when the request is authorized via a Bearer token.",
                    "type": "integer"
                },
                "id": {
                    "description": "The ID of the user.",
                    "type": "string"
                },
                "locale": {
                    "description": "The user's chosen language option.",
                    "type": "string"
                },
                "mfa_enabled": {
                    "description": "Whether the user has multi-factor authentication enabled.",
                    "type": "boolean"
                },
                "premium_type": {
                    "description": "The type of Nitro subscription on a user's account.\nOnly available when the request is authorized via a Bearer token.",
                    "type": "integer"
                },
                "public_flags": {
                    "description": "The public flags on a user's account.\nThis is a combination of bit masks; the presence of a certain flag can\nbe checked by performing a bitwise AND between this int and the flag.",
                    "type": "integer"
                },
                "system": {
                    "description": "Whether the user is an Official Discord System user (part of the urgent message system).",
                    "type": "boolean"
                },
                "token": {
                    "description": "The token of the user. This is only present for\nthe user represented by the current session.",
                    "type": "string"
                },
                "username": {
                    "description": "The user's username.",
                    "type": "string"
                },
                "verified": {
                    "description": "Whether the user's email is verified.",
                    "type": "boolean"
                }
            }
        },
        "rest.Response": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "rest.songQuery": {
            "type": "object",
            "required": [
                "song"
            ],
            "properties": {
                "song": {
                    "type": "string"
                }
            }
        },
        "voice.Metadata": {
            "type": "object",
            "properties": {
                "artists": {
                    "description": "List of artists for this queue entry",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/voice.MetadataArtist"
                    }
                },
                "artwork_url": {
                    "description": "Entry artwork URL",
                    "type": "string"
                },
                "display_url": {
                    "description": "Entry page URL to display to users",
                    "type": "string"
                },
                "duration": {
                    "description": "Entry duration",
                    "type": "number"
                },
                "stream_url": {
                    "description": "Entry URL for streaming",
                    "type": "string"
                },
                "thumbnail_url": {
                    "description": "Entry artwork thumbnail URL",
                    "type": "string"
                },
                "title": {
                    "description": "Entry title",
                    "type": "string"
                }
            }
        },
        "voice.MetadataArtist": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Artist name",
                    "type": "string"
                },
                "url": {
                    "description": "Artist page URL",
                    "type": "string"
                }
            }
        },
        "voice.QueueEntry": {
            "type": "object",
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/voice.Metadata"
                },
                "requester": {
                    "$ref": "#/definitions/discordgo.User"
                },
                "service_color": {
                    "description": "Color of service used for this queue entry",
                    "type": "integer"
                },
                "service_name": {
                    "description": "Name of service used for this queue entry",
                    "type": "string"
                }
            }
        }
    }
}